-- Get location recommondation by item

MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
WITH count(r) AS TOTAL_COUNT
MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
RETURN l.name AS Location, (count(r)*1.0/ TOTAL_COUNT*1.0) AS Weight
ORDER BY Weight DESC

-- Get location recommondation by item consider timestamp

MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
WITH count(r) AS TOTAL_COUNT
MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
WITH (count(r)*1.0/ TOTAL_COUNT*1.0) AS Weight,l,(<actual-timestamp>-toInt(r.timestamp)) as timecap
WITH collect({location: l.name, weight: Weight*(10000.0/timecap*1.0)}) AS results

UNWIND results AS row
RETURN row.location AS Location, sum(row.weight) AS Weight
ORDER BY Weight DESC

-- Get location recommondation by category item

MATCH (i:Item{name:<item-name>})-[r:HAS_CATEGORY]->(c:Category) 
WITH c
MATCH (c)<-[]-()-[r:LOCATED_
-- Get location recommondation item and category combined, with weights item recommondation = 1 and category recommondation = 1.2

MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
WITH count(r) AS TOTAL_COUNT
MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
WITH (count(r)*1.0/ TOTAL_COUNT*1.0) AS Weight,l
WITH collect({location: l.name, weight: Weight*1 }) AS itemResult

MATCH (i:Item{name:<item-name>})-[r:HAS_CATEGORY]->(c:Category) 
WITH c,itemResult
MATCH (c)<-[]-()-[r:LOCATED_AT]->(:Location) 
WITH count(r) AS TOTAL_COUNT,itemResult
MATCH (i:Item{name:<item-name>})-[r:HAS_CATEGORY]->(c:Category) 
WITH c, TOTAL_COUNT,itemResult
MATCH (c)<-[]-()-[r:LOCATED_AT]->(l:Location) 
WITH (count(r)*1.0/ TOTAL_COUNT*1.0) AS Weight,l,itemResult
WITH itemResult + collect({location: l.name, weight: Weight*1.2 }) AS results


UNWIND results AS row
RETURN row.location AS Location, sum(row.weight) AS Weight
ORDER BY Weight DESCAT]->(:Location) 
WITH count(r) AS TOTAL_COUNT
MATCH (i:Item{name:<item-name>})-[r:HAS_CATEGORY]->(c:Category) 
WITH c, TOTAL_COUNT
MATCH (c)<-[]-()-[r:LOCATED_AT]->(l:Location) 
RETURN l.name AS Location, count(r)*1.0/TOTAL_COUNT*1.0 AS Weight
ORDER BY Weight DESC

-- Get location recommondation item and category combined, with weights item recommondation = 1 and category recommondation = 1.2

MATCH (i:Item{name:<item-name>})-[r:LOCATED_AT]->(l:Location) 
WITH count(r) AS TOTAL_COUNT
MATCH (i:Item{name:"Headphone"})-[r:LOCATED_AT]->(l:Location) 
WITH (count(r)*1.0/ TOTAL_COUNT*1.0) AS Weight,l
WITH collect({location: l.name, weight: Weight*1 }) AS itemResult

MATCH (i:Item{name:<item-name>})-[r:HAS_CATEGORY]->(c:Category) 
WITH c,itemResult
MATCH (c)<-[]-()-[r:LOCATED_AT]->(:Location) 
WITH count(r) AS TOTAL_COUNT,itemResult
MATCH (i:Item{name:<item-name>})-[r:HAS_CATEGORY]->(c:Category) 
WITH c, TOTAL_COUNT,itemResult
MATCH (c)<-[]-()-[r:LOCATED_AT]->(l:Location) 
WITH (count(r)*1.0/ TOTAL_COUNT*1.0) AS Weight,l,itemResult
WITH itemResult + collect({location: l.name, weight: Weight*1.2 }) AS results

UNWIND results AS row
RETURN row.location AS Location, sum(row.weight) AS Weight
ORDER BY Weight DESC
